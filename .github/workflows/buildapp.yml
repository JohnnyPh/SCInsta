name: Build and Package SCInsta

on:
  workflow_dispatch:
    inputs:
      decrypted_instagram_url:
        description: "The direct URL to the decrypted Instagram IPA"
        default: "https://www.dropbox.com/scl/fi/65soeeofate2oky450y3z/com.burbn.instagram_388.0.0_und3fined.ipa?rlkey=e96pajd1xte9xrcu9exhvy60g&st=t5kpg2ew&dl=1"
        required: true
        type: string
      create_release:
        description: "Create a public GitHub release"
        default: true
        required: false
        type: boolean
      upload_to_appdb:
        description: "Upload and Edit Metadata on appdb"
        default: true
        required: false
        type: boolean
      cleanup_old_versions:
        description: "Delete older versions of this app from appdb"
        default: true
        required: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build SCInsta
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Main
        uses: actions/checkout@v4
        with:
          path: main
          submodules: recursive

      - name: Install Dependencies
        run: brew install ldid dpkg make jq

      - name: Set PATH environment variable
        run: echo "$(brew --prefix make)/libexec/gnubin" >> $GITHUB_PATH

      - name: Setup Theos
        uses: actions/checkout@v4
        with:
          repository: theos/theos
          ref: master
          path: ${{ github.workspace }}/theos
          submodules: recursive
      
      - name: SDK Caching
        id: SDK
        uses: actions/cache@v4
        env:
          cache-name: iPhoneOS14.5.sdk
        with:
          path: ${{ github.workspace }}/theos/sdks/
          key: ${{ env.cache-name }}
          restore-keys: ${{ env.cache-name }}

      - name: Download iOS SDK
        if: steps.SDK.outputs.cache-hit != 'true'
        run: |
          git clone --quiet -n --depth=1 --filter=tree:0 https://github.com/xybp888/iOS-SDKs/
          cd iOS-SDKs
          git sparse-checkout set --no-cone iPhoneOS14.5.sdk
          git checkout
          mv *.sdk $THEOS/sdks
        env:
          THEOS: ${{ github.workspace }}/theos

      - name: Download Instagram IPA
        run: |
          cd main
          mkdir -p packages
          echo "::add-mask::${{ inputs.decrypted_instagram_url }}"
          wget "${{ inputs.decrypted_instagram_url }}" --no-verbose -O packages/com.burbn.instagram.ipa
        env:
          THEOS: ${{ github.workspace }}/theos
          
      - name: Validate Downloaded IPA
        run: |
          file_path="${{ github.workspace }}/main/packages/com.burbn.instagram.ipa"
          if [ ! -f "$file_path" ]; then
            echo "::error::Download failed: IPA file not found at $file_path"
            exit 1
          fi
          file_type=$(file --mime-type -b "$file_path")
          echo "Detected file type for downloaded file: $file_type"
          if [[ "$file_type" != "application/x-ios-app" && "$file_type" != "application/zip" ]]; then
            echo "::error::Validation failed: The downloaded file is not a valid IPA file. Detected type: $file_type."
            exit 1
          fi
          echo "Downloaded IPA is valid."

      - name: Get Versions
        id: versions
        run: |
          SCINSTA_VERSION=$(awk '/Version:/ {print $2}' main/control)
          INSTA_VERSION=$(echo "${{ inputs.decrypted_instagram_url }}" | grep -o -E '[0-9]+\.[0-9]+\.[0-9]+' | head -n 1)
          echo "SCINSTA_VERSION=${SCINSTA_VERSION}" >> "$GITHUB_OUTPUT"
          echo "INSTA_VERSION=${INSTA_VERSION}" >> "$GITHUB_OUTPUT"
      
      - name: Build SCInsta tweak for sideloading (as IPA)
        run: |
          pip install --force-reinstall https://github.com/asdfzxcvbn/pyzule-rw/archive/main.zip
          cd main
          ./build.sh sideload
        env:
          THEOS: ${{ github.workspace }}/theos

      - name: Rename IPA to include version info
        run: |
          cd main/packages
          mv "$(ls -t | head -n1)" "SCInsta_sideloaded_v${{ steps.versions.outputs.SCINSTA_VERSION }}.ipa"

      - name: Pass package name to subsequent steps
        id: package_info
        run: |
          echo "package_name=$(ls -t main/packages | head -n1)" >> "$GITHUB_OUTPUT"
          echo "job_id=$(echo -n "${{ github.run_id }}-${{ github.run_attempt }}" | shasum -a 1 | awk '{print $1}')" >> "$GITHUB_OUTPUT"

      - name: Upload and Edit on appdb
        if: ${{ inputs.upload_to_appdb }}
        id: upload_step
        env:
          APPDB_LINK_TOKEN: ${{ secrets.APPDB_LINK_TOKEN }}
          PACKAGE_PATH: ${{ github.workspace }}/main/packages/${{ steps.package_info.outputs.package_name }}
          JOB_ID: ${{ steps.package_info.outputs.job_id }}
          SCINSTA_VERSION: ${{ steps.versions.outputs.SCINSTA_VERSION }}
          INSTA_VERSION: ${{ steps.versions.outputs.INSTA_VERSION }}
        run: |
          echo "Step 1: Uploading IPA to appdb..."
          curl -sS -X POST https://api.dbservices.to/v1.7/add_ipa/ \
               -F "lt=${APPDB_LINK_TOKEN}" \
               -F "job_id=${JOB_ID}" \
               -F "ipa=@${PACKAGE_PATH}" \
               --fail

          echo "Step 2: Waiting for IPA processing..."
          for i in {1..20}; do
            sleep 15
            STATUS_RESPONSE=$(curl -sS -X POST https://api.dbservices.to/v1.7/get_ipa_analyze_jobs/ -F "lt=${APPDB_LINK_TOKEN}" -F "ids[]=${JOB_ID}")
            IS_FINISHED=$(echo "$STATUS_RESPONSE" | jq -r '.data[0].is_finished')
            if [ "$IS_FINISHED" = "1" ]; then
              echo "Processing finished!"
              break
            fi
            echo "Still processing... Attempt $i of 20."
            if [ "$i" = "20" ]; then
              echo "Error: Timeout waiting for IPA processing."
              exit 1
            fi
          done
          
          echo "Step 3: Fetching the new IPA ID..."
          IPA_ID=$(curl -sS -X POST https://api.dbservices.to/v1.7/get_ipas/ -F "lt=${APPDB_LINK_TOKEN}" | jq '(.data | sort_by(.id) | reverse)[0].id')

          if [ -z "$IPA_ID" ] || [ "$IPA_ID" = "null" ]; then
            echo "Error: Could not fetch new IPA ID."
            exit 1
          fi
          echo "Found newest IPA ID: ${IPA_ID}"
          echo "ipa_id=${IPA_ID}" >> "$GITHUB_OUTPUT"

          echo "Step 4: Editing IPA metadata..."
          APP_NAME="Instagram v${INSTA_VERSION} + SCInsta v${SCINSTA_VERSION} | Instagram, Inc."
          curl -sS -X POST https://api.dbservices.to/v1.7/edit_ipa_metadata/ \
            -F "lt=${APPDB_LINK_TOKEN}" \
            -F "id=${IPA_ID}" \
            -F "name=${APP_NAME}" \
            -F "use_default_tos=1" \
            -F "use_default_privacy_policy=1" \
            -F "use_default_license=1" \
            -F "is_18plus=0" \
            -F "description=Enhanced Instagram with SCInsta injected" \
            -F "whatsnew=Weâ€™ve updated the app to improve performance and bring you even closer to the people and things you love." \
            -F "is_public=1" \
            -F "use_sideloading_patch=0" \
            -F "use_jit_support=0" \
            -F "use_explicit_bundle_id=0" \
            -F "use_group_patch=0" \
            -F "source_name=Johnny's library" \
            -F "developer_name=Instagram, Inc." \
            -F "genre_name=Enhanced Apps" \
            -F "min_ios_version=15.0" \
            -F "min_ipados_version=15.0" \
            -F "min_macos_version=11.0" \
            --fail
          echo "Metadata updated successfully!"

      - name: Cleanup Old Versions
        if: ${{ inputs.upload_to_appdb && inputs.cleanup_old_versions }}
        env:
          APPDB_LINK_TOKEN: ${{ secrets.APPDB_LINK_TOKEN }}
          NEWEST_IPA_ID: ${{ steps.upload_step.outputs.ipa_id }}
        run: |
          echo "Step 5: Cleaning up old IPA versions, keeping ID ${NEWEST_IPA_ID}..."
          
          IPAS_RESPONSE=$(curl -sS -X POST https://api.dbservices.to/v1.7/get_ipas/ -F "lt=${APPDB_LINK_TOKEN}")

          OLD_IPA_IDS=$(echo "$IPAS_RESPONSE" | jq -r --argjson newest_id "$NEWEST_IPA_ID" '(.data | map(select(.name | contains("Instagram"))) | map(select(.id != $newest_id)) | .[].id)')

          if [ -z "$OLD_IPA_IDS" ]; then
            echo "No old IPA versions found to delete."
          else
            echo "Found old IPAs to delete with IDs: $OLD_IPA_IDS"
            for OLD_ID in $OLD_IPA_IDS; do
              echo "Deleting IPA with ID: $OLD_ID..."
              curl -sS -X POST https://api.dbservices.to/v1.7/delete_ipa/ \
                -F "lt=${APPDB_LINK_TOKEN}" \
                -F "id=${OLD_ID}" \
                --fail
              echo "Deleted IPA with ID: $OLD_ID"
              sleep 2
            done
          fi
          echo "Cleanup finished."

      - name: Create Release
        if: ${{ inputs.create_release }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: SCInsta-v${{ steps.versions.outputs.SCINSTA_VERSION }}-${{ steps.versions.outputs.INSTA_VERSION }}
          name: SCInsta v${{ steps.versions.outputs.SCINSTA_VERSION }} for Instagram v${{ steps.versions.outputs.INSTA_VERSION }}
          files: main/packages/${{ steps.package_info.outputs.package_name }}
          draft: false
